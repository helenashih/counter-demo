[{"/Users/helenachapman/Documents/GitHub/counter-demo/src/index.js":"1","/Users/helenachapman/Documents/GitHub/counter-demo/src/App.js":"2","/Users/helenachapman/Documents/GitHub/counter-demo/src/reportWebVitals.js":"3","/Users/helenachapman/Documents/GitHub/counter-demo/src/components/counter.jsx":"4","/Users/helenachapman/Documents/GitHub/counter-demo/src/components/counters.jsx":"5","/Users/helenachapman/Documents/GitHub/counter-demo/src/components/navbar.jsx":"6"},{"size":501,"mtime":1611545418079,"results":"7","hashOfConfig":"8"},{"size":383,"mtime":1611545806302,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611430928419,"results":"10","hashOfConfig":"8"},{"size":1078,"mtime":1611543886180,"results":"11","hashOfConfig":"8"},{"size":1401,"mtime":1611544505286,"results":"12","hashOfConfig":"8"},{"size":266,"mtime":1611545203013,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nmo274",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},"/Users/helenachapman/Documents/GitHub/counter-demo/src/index.js",[],"/Users/helenachapman/Documents/GitHub/counter-demo/src/App.js",[],"/Users/helenachapman/Documents/GitHub/counter-demo/src/reportWebVitals.js",[],["29","30"],"/Users/helenachapman/Documents/GitHub/counter-demo/src/components/counter.jsx",["31"],"import React, {Component} from 'react';\n\nclass Counter extends Component{\n\n\n\n    render()\n    {\n        return (\n            <div>\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n            <button onClick={() => this.props.onIncrement(this.props.counter)}\n                    className=\"btn btn-primary\">Increment\n            </button>\n                <button onClick={() => this.props.onDelete(this.props.counter.id)}\n                        className=\"btn btn-danger btn-sm m-2\">Delete\n                </button>\n    </div>\n    );\n    }\n    getBadgeClasses() {\n        let classes = \"badge m-2 bg-\";\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formatCount() {\n        const { value }= this.props.counter;\n        return value === 0 ? \"Zero\" : value;\n    }\n}\nexport default Counter;\n{/* renderTags() {\n        if (this.state.tags.length === 0) return <p>There are no tags.</p>;\n        return <ul>{ this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul>;\n    }\n    */}\n\n\n","/Users/helenachapman/Documents/GitHub/counter-demo/src/components/counters.jsx",[],"/Users/helenachapman/Documents/GitHub/counter-demo/src/components/navbar.jsx",["32"],"import React, {Component} from 'react';\n\nclass NavBar extends Component {\n    render() {\n        return(\n        <nav className=\"navbar navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n        </nav>\n);\n    }\n}\nexport default NavBar;\n\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":33,"column":1,"nodeType":"39","messageId":"40","endLine":37,"endColumn":8},{"ruleId":"41","severity":1,"message":"42","line":7,"column":9,"nodeType":"43","endLine":7,"endColumn":46},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]